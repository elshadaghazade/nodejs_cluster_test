{"version":3,"sources":["app/home/Home.js","serviceWorker.js","index.js"],"names":["Home","state","procList","axios","post","conf","api_url","action","headers","then","response","setState","data","catch","err","console","log","this","loadNodes","pid","window","confirm","Container","Jumbotron","Row","Col","xs","ButtonGroup","Button","variant","onClick","reloadCB","bind","addNewNode","Table","striped","bordered","hover","style","width","filter","proc","isDead","map","index","key","isMaster","killProcCB","setAsMaster","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iUAiJeA,G,wDAjIX,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,SAAU,IAJJ,E,wDAQD,IAAD,OACRC,IAAMC,KAAKC,EAAKC,QAAS,CACrBC,OAAQ,aACT,CACCC,QAAS,CACL,eAAgB,uCAGnBC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVT,SAAUQ,EAASE,UAG1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,Q,0CAIvCG,KAAKC,c,iCAILD,KAAKC,c,iCAGEC,GAAM,IAAD,OACZ,IAAKC,OAAOC,QAAQ,kCAChB,OAAO,EAGXlB,IAAMC,KAAKC,EAAKC,QAAS,CACrBC,OAAQ,OACRY,OACD,CACCX,QAAS,CACL,eAAgB,uCAGnBC,MAAK,SAAAC,GACF,EAAKQ,eAERL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,Q,kCAG/BK,GAAM,IAAD,OACbhB,IAAMC,KAAKC,EAAKC,QAAS,CACrBC,OAAQ,aACRY,OACD,CACCX,QAAS,CACL,eAAgB,uCAGnBC,MAAK,SAAAC,GACF,EAAKQ,eAERL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,Q,mCAG7B,IAAD,OACTX,IAAMC,KAAKC,EAAKC,QAAS,CACrBC,OAAQ,gBACT,CACCC,QAAS,CACL,eAAgB,uCAGnBC,MAAK,SAAAC,GACF,EAAKQ,eAERL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,Q,+BAGjC,IAAD,OACL,OACI,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,iDACA,iHAEJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASb,KAAKc,SAASC,KAAKf,OAAtD,UACA,kBAACW,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASb,KAAKgB,WAAWD,KAAKf,OAAxD,mBAIZ,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACQ,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,wBAAIC,MAAO,CAAEC,MAAO,KAApB,KACA,mCACA,oCACA,wCAGR,+BACKtB,KAAKhB,MAAMC,SAASsC,QAAO,SAAAC,GAAI,OAAKA,EAAKC,UAAQC,KAAI,SAACF,EAAMG,GAAP,OAClD,wBAAIC,IAAG,wBAAmBD,IACtB,4BAAKA,GACL,4BAAKH,EAAKtB,KACV,4BAAKsB,EAAKK,SAAW,SAAW,UAChC,wBAAIR,MAAO,CAAEC,MAAO,MAChB,kBAACZ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,kBAAM,EAAKiB,WAAWN,EAAKtB,OAA7D,QACA,kBAACS,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM,EAAKkB,YAAYP,EAAKtB,OAA/D,gC,GApH7B8B,cCHCC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.bdae4dbc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport conf from '../../conf.json';\nimport {\n    Container,\n    Jumbotron,\n    Col,\n    Row,\n    Table,\n    Button,\n    ButtonGroup,\n    InputGroup\n} from 'react-bootstrap';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Home extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            procList: []\n        }\n    }\n\n    loadNodes() {\n        axios.post(conf.api_url, {\n            action: 'proc_list'\n        }, {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        })\n            .then(response => {\n                this.setState({\n                    procList: response.data\n                })\n            })\n            .catch(err => console.log(\"ERROR\", err));\n    }\n\n    componentDidMount() {\n        this.loadNodes();\n    }\n\n    reloadCB() {\n        this.loadNodes();\n    }\n\n    killProcCB(pid) {\n        if (!window.confirm('Are you sure to kill the node?')) {\n            return false;\n        }\n\n        axios.post(conf.api_url, {\n            action: 'kill',\n            pid\n        }, {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        })\n            .then(response => {\n                this.loadNodes();\n            })\n            .catch(err => console.log(\"ERROR\", err));\n    }\n\n    setAsMaster(pid) {\n        axios.post(conf.api_url, {\n            action: 'set_master',\n            pid\n        }, {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        })\n            .then(response => {\n                this.loadNodes();\n            })\n            .catch(err => console.log(\"ERROR\", err));\n    }\n\n    addNewNode() {\n        axios.post(conf.api_url, {\n            action: 'add_new_node',\n        }, {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        })\n            .then(response => {\n                this.loadNodes();\n            })\n            .catch(err => console.log(\"ERROR\", err));\n    }\n\n    render() {\n        return (\n            <Container>\n                <Jumbotron>\n                    <h1>NODE.JS CLUSTERDS</h1>\n                    <p>You can add new node or kill existings. Also you can change master node manually.</p>\n                </Jumbotron>\n                <Row>\n                    <Col xs={12}>\n                        <ButtonGroup>\n                            <Button variant=\"primary\" onClick={this.reloadCB.bind(this)}>RELOAD</Button>\n                            <Button variant=\"success\" onClick={this.addNewNode.bind(this)}>ADD NEW NODE</Button>\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12}>\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th style={{ width: 40 }}>#</th>\n                                    <th>PID</th>\n                                    <th>TYPE</th>\n                                    <th>ACTION</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.procList.filter(proc => !proc.isDead).map((proc, index) => (\n                                    <tr key={`table-proc-td-${index}`}>\n                                        <td>{index}</td>\n                                        <td>{proc.pid}</td>\n                                        <td>{proc.isMaster ? 'Master' : 'Worker'}</td>\n                                        <td style={{ width: 250 }}>\n                                            <ButtonGroup>\n                                                <Button variant=\"danger\" onClick={() => this.killProcCB(proc.pid)}>KILL</Button>\n                                                <Button variant=\"warning\" onClick={() => this.setAsMaster(proc.pid)}>SET AS MASTER</Button>\n                                            </ButtonGroup>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './app/home/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}